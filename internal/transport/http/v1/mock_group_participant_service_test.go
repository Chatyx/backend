// Code generated by mockery v2.40.1. DO NOT EDIT.

package v1

import (
	context "context"

	entity "github.com/Chatyx/backend/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockGroupParticipantService is an autogenerated mock type for the GroupParticipantService type
type MockGroupParticipantService struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, groupID, userID
func (_m *MockGroupParticipantService) Get(ctx context.Context, groupID int, userID int) (entity.GroupParticipant, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.GroupParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (entity.GroupParticipant, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) entity.GroupParticipant); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(entity.GroupParticipant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invite provides a mock function with given fields: ctx, groupID, userID
func (_m *MockGroupParticipantService) Invite(ctx context.Context, groupID int, userID int) (entity.GroupParticipant, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Invite")
	}

	var r0 entity.GroupParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (entity.GroupParticipant, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) entity.GroupParticipant); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(entity.GroupParticipant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, groupID
func (_m *MockGroupParticipantService) List(ctx context.Context, groupID int) ([]entity.GroupParticipant, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.GroupParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.GroupParticipant, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.GroupParticipant); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.GroupParticipant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, groupID, userID, status
func (_m *MockGroupParticipantService) UpdateStatus(ctx context.Context, groupID int, userID int, status entity.GroupParticipantStatus) error {
	ret := _m.Called(ctx, groupID, userID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, entity.GroupParticipantStatus) error); ok {
		r0 = rf(ctx, groupID, userID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockGroupParticipantService creates a new instance of MockGroupParticipantService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupParticipantService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupParticipantService {
	mock := &MockGroupParticipantService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
