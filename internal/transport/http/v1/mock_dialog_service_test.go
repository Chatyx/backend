// Code generated by mockery v2.40.1. DO NOT EDIT.

package v1

import (
	context "context"

	dto "github.com/Chatyx/backend/internal/dto"
	entity "github.com/Chatyx/backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockDialogService is an autogenerated mock type for the DialogService type
type MockDialogService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, obj
func (_m *MockDialogService) Create(ctx context.Context, obj dto.DialogCreate) (entity.Dialog, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Dialog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DialogCreate) (entity.Dialog, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.DialogCreate) entity.Dialog); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(entity.Dialog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.DialogCreate) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockDialogService) GetByID(ctx context.Context, id int) (entity.Dialog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Dialog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Dialog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Dialog); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Dialog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *MockDialogService) List(ctx context.Context) ([]entity.Dialog, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Dialog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Dialog, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Dialog); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Dialog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, obj
func (_m *MockDialogService) Update(ctx context.Context, obj dto.DialogUpdate) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DialogUpdate) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDialogService creates a new instance of MockDialogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDialogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDialogService {
	mock := &MockDialogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
