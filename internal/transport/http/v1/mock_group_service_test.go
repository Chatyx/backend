// Code generated by mockery v2.40.1. DO NOT EDIT.

package v1

import (
	context "context"

	dto "github.com/Chatyx/backend/internal/dto"
	entity "github.com/Chatyx/backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockGroupService is an autogenerated mock type for the GroupService type
type MockGroupService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, obj
func (_m *MockGroupService) Create(ctx context.Context, obj dto.GroupCreate) (entity.Group, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GroupCreate) (entity.Group, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GroupCreate) entity.Group); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(entity.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GroupCreate) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockGroupService) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockGroupService) GetByID(ctx context.Context, id int) (entity.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *MockGroupService) List(ctx context.Context) ([]entity.Group, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Group, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, obj
func (_m *MockGroupService) Update(ctx context.Context, obj dto.GroupUpdate) (entity.Group, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GroupUpdate) (entity.Group, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GroupUpdate) entity.Group); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(entity.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GroupUpdate) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGroupService creates a new instance of MockGroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupService {
	mock := &MockGroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
