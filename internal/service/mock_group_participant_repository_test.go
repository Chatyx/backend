// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	context "context"

	entity "github.com/Chatyx/backend/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockGroupParticipantRepository is an autogenerated mock type for the GroupParticipantRepository type
type MockGroupParticipantRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, p
func (_m *MockGroupParticipantRepository) Create(ctx context.Context, p *entity.GroupParticipant) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupParticipant) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, groupID, userID, withLock
func (_m *MockGroupParticipantRepository) Get(ctx context.Context, groupID int, userID int, withLock bool) (entity.GroupParticipant, error) {
	ret := _m.Called(ctx, groupID, userID, withLock)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.GroupParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool) (entity.GroupParticipant, error)); ok {
		return rf(ctx, groupID, userID, withLock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool) entity.GroupParticipant); ok {
		r0 = rf(ctx, groupID, userID, withLock)
	} else {
		r0 = ret.Get(0).(entity.GroupParticipant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, bool) error); ok {
		r1 = rf(ctx, groupID, userID, withLock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, groupID
func (_m *MockGroupParticipantRepository) List(ctx context.Context, groupID int) ([]entity.GroupParticipant, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.GroupParticipant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.GroupParticipant, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.GroupParticipant); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.GroupParticipant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, p
func (_m *MockGroupParticipantRepository) Update(ctx context.Context, p *entity.GroupParticipant) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GroupParticipant) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockGroupParticipantRepository creates a new instance of MockGroupParticipantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupParticipantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupParticipantRepository {
	mock := &MockGroupParticipantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
