// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Mort4lis/scht-backend/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, dto domain.CreateUserDTO) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), ctx, dto)
}

// Delete mocks base method.
func (m *MockUserService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockUserService) GetByID(ctx context.Context, id string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserService)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserService) GetByUsername(ctx context.Context, username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserServiceMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserService)(nil).GetByUsername), ctx, username)
}

// List mocks base method.
func (m *MockUserService) List(ctx context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserService)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockUserService) Update(ctx context.Context, dto domain.UpdateUserDTO) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), ctx, dto)
}

// UpdatePassword mocks base method.
func (m *MockUserService) UpdatePassword(ctx context.Context, dto domain.UpdateUserPasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserServiceMockRecorder) UpdatePassword(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserService)(nil).UpdatePassword), ctx, dto)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthService) Authorize(accessToken string) (domain.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", accessToken)
	ret0, _ := ret[0].(domain.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthServiceMockRecorder) Authorize(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthService)(nil).Authorize), accessToken)
}

// Refresh mocks base method.
func (m *MockAuthService) Refresh(ctx context.Context, dto domain.RefreshSessionDTO) (domain.JWTPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, dto)
	ret0, _ := ret[0].(domain.JWTPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceMockRecorder) Refresh(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthService)(nil).Refresh), ctx, dto)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(ctx context.Context, dto domain.SignInDTO) (domain.JWTPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, dto)
	ret0, _ := ret[0].(domain.JWTPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), ctx, dto)
}

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatService) Create(ctx context.Context, dto domain.CreateChatDTO) (domain.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(domain.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatServiceMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatService)(nil).Create), ctx, dto)
}

// Delete mocks base method.
func (m *MockChatService) Delete(ctx context.Context, chatID, creatorID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, chatID, creatorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChatServiceMockRecorder) Delete(ctx, chatID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatService)(nil).Delete), ctx, chatID, creatorID)
}

// GetByID mocks base method.
func (m *MockChatService) GetByID(ctx context.Context, chatID, memberID string) (domain.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, chatID, memberID)
	ret0, _ := ret[0].(domain.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockChatServiceMockRecorder) GetByID(ctx, chatID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockChatService)(nil).GetByID), ctx, chatID, memberID)
}

// GetOwnByID mocks base method.
func (m *MockChatService) GetOwnByID(ctx context.Context, chatID, creatorID string) (domain.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnByID", ctx, chatID, creatorID)
	ret0, _ := ret[0].(domain.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnByID indicates an expected call of GetOwnByID.
func (mr *MockChatServiceMockRecorder) GetOwnByID(ctx, chatID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnByID", reflect.TypeOf((*MockChatService)(nil).GetOwnByID), ctx, chatID, creatorID)
}

// List mocks base method.
func (m *MockChatService) List(ctx context.Context, memberID string) ([]domain.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, memberID)
	ret0, _ := ret[0].([]domain.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockChatServiceMockRecorder) List(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockChatService)(nil).List), ctx, memberID)
}

// Update mocks base method.
func (m *MockChatService) Update(ctx context.Context, dto domain.UpdateChatDTO) (domain.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto)
	ret0, _ := ret[0].(domain.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockChatServiceMockRecorder) Update(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChatService)(nil).Update), ctx, dto)
}

// MockChatMemberService is a mock of ChatMemberService interface.
type MockChatMemberService struct {
	ctrl     *gomock.Controller
	recorder *MockChatMemberServiceMockRecorder
}

// MockChatMemberServiceMockRecorder is the mock recorder for MockChatMemberService.
type MockChatMemberServiceMockRecorder struct {
	mock *MockChatMemberService
}

// NewMockChatMemberService creates a new mock instance.
func NewMockChatMemberService(ctrl *gomock.Controller) *MockChatMemberService {
	mock := &MockChatMemberService{ctrl: ctrl}
	mock.recorder = &MockChatMemberServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMemberService) EXPECT() *MockChatMemberServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockChatMemberService) Get(ctx context.Context, chatID, userID string) (domain.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, chatID, userID)
	ret0, _ := ret[0].(domain.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatMemberServiceMockRecorder) Get(ctx, chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatMemberService)(nil).Get), ctx, chatID, userID)
}

// GetAnother mocks base method.
func (m *MockChatMemberService) GetAnother(ctx context.Context, authUserID, chatID, userID string) (domain.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnother", ctx, authUserID, chatID, userID)
	ret0, _ := ret[0].(domain.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnother indicates an expected call of GetAnother.
func (mr *MockChatMemberServiceMockRecorder) GetAnother(ctx, authUserID, chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnother", reflect.TypeOf((*MockChatMemberService)(nil).GetAnother), ctx, authUserID, chatID, userID)
}

// IsInChat mocks base method.
func (m *MockChatMemberService) IsInChat(ctx context.Context, userID, chatID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInChat", ctx, userID, chatID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInChat indicates an expected call of IsInChat.
func (mr *MockChatMemberServiceMockRecorder) IsInChat(ctx, userID, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInChat", reflect.TypeOf((*MockChatMemberService)(nil).IsInChat), ctx, userID, chatID)
}

// JoinToChat mocks base method.
func (m *MockChatMemberService) JoinToChat(ctx context.Context, chatID, creatorID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinToChat", ctx, chatID, creatorID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinToChat indicates an expected call of JoinToChat.
func (mr *MockChatMemberServiceMockRecorder) JoinToChat(ctx, chatID, creatorID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinToChat", reflect.TypeOf((*MockChatMemberService)(nil).JoinToChat), ctx, chatID, creatorID, userID)
}

// ListByChatID mocks base method.
func (m *MockChatMemberService) ListByChatID(ctx context.Context, chatID, userID string) ([]domain.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByChatID", ctx, chatID, userID)
	ret0, _ := ret[0].([]domain.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByChatID indicates an expected call of ListByChatID.
func (mr *MockChatMemberServiceMockRecorder) ListByChatID(ctx, chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByChatID", reflect.TypeOf((*MockChatMemberService)(nil).ListByChatID), ctx, chatID, userID)
}

// ListByUserID mocks base method.
func (m *MockChatMemberService) ListByUserID(ctx context.Context, userID string) ([]domain.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockChatMemberServiceMockRecorder) ListByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockChatMemberService)(nil).ListByUserID), ctx, userID)
}

// UpdateStatus mocks base method.
func (m *MockChatMemberService) UpdateStatus(ctx context.Context, dto domain.UpdateChatMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockChatMemberServiceMockRecorder) UpdateStatus(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockChatMemberService)(nil).UpdateStatus), ctx, dto)
}

// UpdateStatusByCreator mocks base method.
func (m *MockChatMemberService) UpdateStatusByCreator(ctx context.Context, creatorID string, dto domain.UpdateChatMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByCreator", ctx, creatorID, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByCreator indicates an expected call of UpdateStatusByCreator.
func (mr *MockChatMemberServiceMockRecorder) UpdateStatusByCreator(ctx, creatorID, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByCreator", reflect.TypeOf((*MockChatMemberService)(nil).UpdateStatusByCreator), ctx, creatorID, dto)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageService) Create(ctx context.Context, dto domain.CreateMessageDTO) (domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), ctx, dto)
}

// List mocks base method.
func (m *MockMessageService) List(ctx context.Context, chatID, userID string, timestamp time.Time) ([]domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, chatID, userID, timestamp)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMessageServiceMockRecorder) List(ctx, chatID, userID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMessageService)(nil).List), ctx, chatID, userID, timestamp)
}

// NewServeSession mocks base method.
func (m *MockMessageService) NewServeSession(ctx context.Context, userID string) (chan<- domain.CreateMessageDTO, <-chan domain.Message) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewServeSession", ctx, userID)
	ret0, _ := ret[0].(chan<- domain.CreateMessageDTO)
	ret1, _ := ret[1].(<-chan domain.Message)
	return ret0, ret1
}

// NewServeSession indicates an expected call of NewServeSession.
func (mr *MockMessageServiceMockRecorder) NewServeSession(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewServeSession", reflect.TypeOf((*MockMessageService)(nil).NewServeSession), ctx, userID)
}
