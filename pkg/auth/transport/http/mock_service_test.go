// Code generated by mockery v2.40.1. DO NOT EDIT.

package http

import (
	context "context"

	auth "github.com/Chatyx/backend/pkg/auth"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, cred, opts
func (_m *MockService) Login(ctx context.Context, cred auth.Credentials, opts ...auth.MetaOption) (auth.TokenPair, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cred)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.Credentials, ...auth.MetaOption) (auth.TokenPair, error)); ok {
		return rf(ctx, cred, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.Credentials, ...auth.MetaOption) auth.TokenPair); ok {
		r0 = rf(ctx, cred, opts...)
	} else {
		r0 = ret.Get(0).(auth.TokenPair)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.Credentials, ...auth.MetaOption) error); ok {
		r1 = rf(ctx, cred, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *MockService) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSession provides a mock function with given fields: ctx, rs, opts
func (_m *MockService) RefreshSession(ctx context.Context, rs auth.RefreshSession, opts ...auth.MetaOption) (auth.TokenPair, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSession")
	}

	var r0 auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.RefreshSession, ...auth.MetaOption) (auth.TokenPair, error)); ok {
		return rf(ctx, rs, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.RefreshSession, ...auth.MetaOption) auth.TokenPair); ok {
		r0 = rf(ctx, rs, opts...)
	} else {
		r0 = ret.Get(0).(auth.TokenPair)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.RefreshSession, ...auth.MetaOption) error); ok {
		r1 = rf(ctx, rs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
